openapi: 3.0.3

info:
  title: API-сервер для демо-проекта «Шесть городов»
  description: Список ресурсов и маршрутов сервера «Шесть городов»
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0

tags:
  - name: offers
    description: Действия с предложениями по аренде.
  - name: comments
    description: Действия с комментариями.
  - name: users
    description: Действия с пользователем.

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        '201':
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        '409':
          description: Пользователь с таким e-mail уже существует.

        '401':
          description: Создать аккаунт могут только анонимные пользователи.

        '400':
          description: Ошибка валидации данных пользователя. В ответе объект с ошибками.

  /users/login:
    post:
      tags:
        - users
      summary: Аутентификация пользователя
      description: Аутентифицирует пользователя на основе логина и пароля

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
        required: true

      responses:
        '200':
          description: Пользователь аутентифицировался. Тело ответа содержит токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'

        '401':
          description: Неверный e-mail или пароль.

        '400':
          description: Ошибка валидации данных пользователя. В ответе объект с ошибками.

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю

      responses:
        '200':
          description: Пользователь аутентифицирован. Тело ответа содержит информацию о пользователе.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        '401':
          description: Пользователь не аутентифицирован.

  /users/{userId}/avatar:
    post:
      tags:
        - users
      summary: Загрузить изображение аватара
      description: Загружает изображение аватара пользователя. Изображение
        аватара должно быть в формате `png` или `jpg`.

      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'file' will be the field name in this multipart request
                file:
                  type: string
                  format: binary

      responses:
        '201':
          description: Аватар пользователя был загружен.
          content:
            application/json:
              schema:
                type: object

                properties:
                  filepath:
                    type: string
                    example: /keks.png

  /offers:
    get:
      tags:
        - offers
      summary: Все предложения
      description: Выдаёт массив последних предложений. Максимальный размер берётся из значения по умолчанию или из query параметра.

      parameters:
        - name: count
          in: query
          required: false
          schema:
            type: integer

      responses:
        '200':
          description: В теле ответа информация о найденных предложениях.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offer'

        '400':
          description: Отправлены некорректные данные (query параметр count).

    post:
      tags:
        - offers
      summary: Создание предложения
      description: Создаёт предложение об аренде на основе данных в теле запроса.

      requestBody:
        description: Информация для создания нового предложения.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOffer'
        required: true

      responses:
        '201':
          description: Предложение об аренде создано. В теле ответа информация о новом предложении.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

        '400':
          description: Отправлены некорректные данные.

  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Поиск предложения по id
      description: Выдаёт предложение об аренде на основе id предложения в url.

      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Предложение найдено. В теле ответа информация о предложении.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

        '400':
          description: Отправлены некорректные данные.

        '404':
          description: Предложение с указанным id не найдено.

    patch:
      tags:
        - offers
      summary: Редактирование предложения
      description: Создаёт предложение об аренде на основе id предложения в url и данных в теле запроса.

      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Информация для редактирования предложения.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editOffer'
        required: true

      responses:
        '201':
          description: Предложение об аренде создано. В теле ответа информация о новом предложении.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

        '400':
          description: Отправлены некорректные данные.

        '401':
          description: Ошибка авторизации пользователя.

        '404':
          description: Предложение с указанным id не найдено.

    delete:
      tags:
        - offers
      summary: Удаление предложения
      description: Удаляет предложение об аренде и комментарии к нему на основе id предложения в url.

      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string

      responses:
        '204':
          description: Предложение и комментарии к нему были удалены.

        '401':
          description: Ошибка авторизации пользователя.

        '404':
          description: Предложение с указанным id не найдено.

  /offers/favorites:
    get:
      tags:
        - offers
      summary: Избранные предложения.
      description: Выдаёт избранные предложения для авторизованного пользователя.

      responses:
        '200':
          description: В теле ответа информация о найденных предложениях.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offer'

        '401':
          description: Ошибка авторизации пользователя.

  /offers/premium/{city}:
    get:
      tags:
        - offers
      summary: Премиальные предложения по городу.
      description: Выдаёт до трёх премиальных предложений соответствующих указанному в параметре городу.

      parameters:
        - name: city
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/City'

      responses:
        '200':
          description: В теле ответа информация о найденных предложениях.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offer'

        '400':
          description: Отправлены некорректные данные (параметр city).

  /offers/{offerId}/favorites:
    post:
      tags:
        - offers
      summary: Добавление в избранное.
      description: Добавляет предложение в избранное по указанному id для авторизованного пользователя.

      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string

      responses:
        '201':
          description: Предложение было добавлено в избранное.

        '400':
          description: Отправлены некорректные данные.

        '401':
          description: Ошибка авторизации пользователя.

        '404':
          description: Предложение с указанным id не найдено.

    delete:
      tags:
        - offers
      summary: Удаление из избранного.
      description: Удаляет предложение из избранного по указанному id для авторизованного пользователя.

      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string

      responses:
        '204':
          description: Предложение было удалено из избранного.

        '400':
          description: Отправлены некорректные данные.

        '401':
          description: Ошибка авторизации пользователя.

        '404':
          description: Предложение с указанным id не найдено.

  /comments/{offerId}:
    get:
      tags:
        - comments
      summary: Получение комментариев.
      description: Выдаёт комментарии к предложению по id предложения в параметре.

      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Найденные комментарии.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

        '400':
          description: Отправлены некорректные данные.

        '404':
          description: Предложение с указанным id не найдено.

    post:
      tags:
        - comments
      summary: Добавление комментария.
      description: Добавляет комментарий по id предложения в параметре и на основе данных в теле запроса. Для авторизованного пользователя.

      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Информация для добавления комментария.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createComment'
        required: true

      responses:
        '201':
          description: Комментарий был создан.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

        '400':
          description: Отправлены некорректные данные.

        '401':
          description: Ошибка авторизации.

        '404':
          description: Предложение с указанным id не найдено.

components:
  schemas:
    createUser:
      type: object
      required:
        - email
        - name
        - password

      properties:
        email:
          type: string
          example: keks@htmlacademy.ru

        name:
          type: string
          example: Keks

        password:
          type: string
          example: 123456

        avatarPath:
          type: string
          example: keks.png

    user:
      type: object
      required:
        - id
        - email
        - name
        - type

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        email:
          type: string
          example: keks@htmlacademy.ru

        name:
          type: string
          example: 'Keks'

        type:
          type: string
          enum:
            - Regular
            - Pro

    login:
      type: object
      required:
        - email
        - password

      properties:
        email:
          type: string
          example: keks@htmlacademy.ru

        password:
          type: string
          example: 123456

    token:
      type: object
      properties:
        email:
          type: string
          example: keks@htmlacademy.ru

        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiS2VrcyIsImlhdCI6MTUxNjIzOTAyMn0.b70TcqqCbA623pnThjhwGeohCbjFOI6I6P2rbFGQuO4

    createOffer:
      type: object
      required:
        - title
        - description
        - city
        - preview
        - photos
        - type
        - roomsCount
        - guestsCount
        - price
        - comforts
        - latitude
        - longitude

      properties:
        title:
          type: string
          example: 'Hotel California'
          minLength: 10
          maxLength: 100

        description:
          type: string
          example: 'Such a lovely place'
          minLength: 20
          maxLength: 1024

        city:
          $ref: '#/components/schemas/City'

        preview:
          type: string
          example: hotel.jpg

        photos:
          $ref: '#/components/schemas/Photos'

        isPremium:
          type: boolean
          example: true

        type:
          $ref: '#/components/schemas/Types'

        roomsCount:
          type: integer
          example: 4
          minimum: 1
          maximum: 8

        guestsCount:
          type: integer
          example: 4
          minimum: 1
          maximum: 10

        price:
          type: integer
          example: 10000
          minimum: 100
          maximum: 100000

        comforts:
          $ref: '#/components/schemas/Comforts'

        coordinates:
          $ref: '#/components/schemas/Coordinates'

    editOffer:
      type: object

      properties:
        title:
          type: string
          example: 'Hotel California'
          minLength: 10
          maxLength: 100

        description:
          type: string
          example: 'Such a lovely place'
          minLength: 20
          maxLength: 1024

        city:
          $ref: '#/components/schemas/City'

        preview:
          type: string
          example: hotel.jpg

        photos:
          $ref: '#/components/schemas/Photos'

        isPremium:
          type: boolean
          example: true

        type:
          $ref: '#/components/schemas/Types'

        roomsCount:
          type: integer
          example: 4
          minimum: 1
          maximum: 8

        guestsCount:
          type: integer
          example: 4
          minimum: 1
          maximum: 10

        price:
          type: integer
          example: 10000
          minimum: 100
          maximum: 100000

        comforts:
          $ref: '#/components/schemas/Comforts'

        coordinates:
          $ref: '#/components/schemas/Coordinates'

    offer:
      type: object
      required:
        - id
        - title
        - description
        - createdAt
        - city
        - preview
        - photos
        - isPremium
        - isFavorite
        - rating
        - type
        - roomsCount
        - guestsCount
        - price
        - comforts
        - coordinates
        - author
        - commentsCount

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        title:
          type: string
          example: 'Hotel California'

        description:
          type: string
          example: 'Such a lovely place'

        createdAt:
          type: string
          example: '2022-04-06T08:45:40.283Z'

        city:
          $ref: '#/components/schemas/City'

        preview:
          type: string
          example: hotel.jpg

        photos:
          $ref: '#/components/schemas/Photos'

        isPremium:
          type: boolean
          example: true

        isFavorite:
          type: boolean
          example: true

        rating:
          type: number
          example: 4.5

        type:
          $ref: '#/components/schemas/Types'

        roomsCount:
          type: integer
          example: 4

        guestsCount:
          type: integer
          example: 4

        price:
          type: integer
          example: 10000

        comforts:
          $ref: '#/components/schemas/Comforts'

        author:
          $ref: '#/components/schemas/user'

        commentsCount:
          type: integer
          example: 50

        coordinates:
          $ref: '#/components/schemas/Coordinates'

    City:
      type: string
      enum:
        - Paris
        - Cologne
        - Brussels
        - Amsterdam
        - Hamburg
        - Dusseldorf

    Types:
      type: string
      enum:
        - Apartment
        - House
        - Room
        - Hotel

    Comforts:
      type: array
      items:
        type: string
        enum:
          - Breakfast
          - Air conditioning
          - Laptop friendly workspace
          - Baby seat
          - Washer
          - Towels
          - Fridge

    Photos:
      type: array
      items:
        type: string
      example:
        - photo1.jpg
        - photo2.jpg
        - photo3.jpg
        - photo4.jpg
        - photo5.jpg
        - photo6.jpg

    Coordinates:
      type: array
      items:
        type: string
      example:
        - 53.550341 # latitude
        - 10.000654 # longitude

    Comment:
      type: object
      required:
        - text
        - rating
        - author
        - createdAt
      properties:
        text:
          type: string
          example: Текст комментария
        rating:
          type: number
          example: 4
        author:
          $ref: '#/components/schemas/user'
        createdAt:
          type: string
          example: '2022-04-06T08:45:40.283Z'

    createComment:
      type: object
      required:
        - text
        - rating
      properties:
        text:
          type: string
          example: Текст комментария
        rating:
          type: number
          example: 4
